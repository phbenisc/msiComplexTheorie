@startmindmap
'https://plantuml.com/mindmap-diagram
skinparam monochrome true


title Themenübersicht Komplexitätstheorie

* Komplexitätstheorie

** Formale Sprachen
*** Abstrakte Maschine
****_ math Modell zu Berechnung
****_ Regeln zur transformation von Input -> Output
****_ ist math. Modell zur Berechnung des Wortproblems einer formalen Sprache
****_ ist eine math. Funktion, die ein Eingangswort auf ein Ausgangsbit abbildet. (true, false)
*** Formale Sprache
****_ Menge von Wörtern (mit den Symbolen des spez. Alphabets) + spez. Regeln
**** Symbol
*****_ unique Zeichen
**** Alphabet
*****_ Endliche Menge an Symbolen
*****_ Σ={2,4,5,6,7,8}
**** Wort (W)
*****_ Sequenz von Symbolen
*****_ Wörter in Sprache: ab, bb ∈ L
*****_ Wörter nicht in Sprache: ab, bb ∋ L

** Regex
*** Operationen
****_ R|S Vereinigung von R und S, true, wenn in mind. einer von beiden Mengen
****_ RS Konkatenation es ergibt sich ein zusammengesetztes Wort
****_ Endlicher Abschluss R* wiederholt R 0-n
****_ Klammerung (R) hauptsächlich zur Gruppierung

** DFA (Q, Σ, δ, q0, F)
***_ Deterministic finite automaton
***_ jeder DFA ist auch ein NFA
*** Zustände
****_ Akzeptanzzustand
****_ Ablehnungszustand
****_ Zustandsmenge (alle Zustände) hat als Zeichen Q und wird mit Index angegeben Q = {0,1 ...}
****_ Finalmenge sind alle Akzeptanzzustände der Zustandsmenge F = {0,2}
****_ Startzustand q0 oder 0
*** Transitionen
****_ Spez. Zustandswechsel
****_ nur eine Transition pro Symbol erlaubt
****_ Zustandsübergangfunktion δ
****_ Tabelle für Zustandsübergangfunktion: \n δ über Σ (Index) | Zustand | a | b (a und b sind exemplarisch für Alphabet)
*** Leseeinheit
****_ Initial immer auf erstem Symbol (Kopf läuft nur nach rechts)

** NFA (Q, Σ, δ, q0, F)
***_ Nondeterministic finite automaton
*** Vorteile
****_ kompakter
****_ oft einfacher
****_ Grundlage für Regex
*** Zustände
****_ wie DFA
**** kann mehr als 1 Zustand gleichzeitig haben
*****_ Maschiene akzeptiert ein Wort, \n wenn mind. ein Akzeptanzzustand erreicht worden ist
*****_ mehrere Startzustände sind erlaubt (q0)
*** Transition
****_ mehr als eine Transition pro Symbol
****_ nicht beschriftete Transition (Zustand wird autm. mit Vorgänger getriggert)
****_ Symbole müssen nicht als Transition vorhanden sein (Zustand verfällt)

** Kleene’s Theorem
***_ Reguläre Ausdrücke, DFAs und NFAs sind äquivalente Modelle, in dem Sinn, dass sie alle reguläre Sprachen charakterisieren.
*** NFA zu DFA
**** 1. Zustandstabelle
*****_ <img:nfaToDfa.png {scale=0.75}> \n ∅ wenn kein Zustand gültig ist (verbleibt auch auf ∅)
*****_ fange bei Startzustand an und füg nur Zustandkombinationen hinzu, wenn diese erreicht werden
**** 2. DFA
*****_ jede Zustandskombination ist ein Knoten
*****_ alle übergänge sind durch Tabelle definiert.
*****_ Leere Menge ∅ nicht vergessen, wenn erreichbar!
*** NFA zu Regex
****_ Verkettung
*****_ <img:regexToNfaVereinigung.png {scale=0.5}>
****_ Schleifen
*****_ <img:regexToNfaLoops.png {scale=0.5}>
*** Regex zu NFA
****_ selbes nur umgekehrt

** Turing-Maschiene
*** Zustände
**** Richtungszustände (definiert Leserichtung)
*****_ Linkszustand
*****_ Rechtszustand
**** Endzustände
*****_ Haltezustand (Maschine wird gestoppt)
*****_ Akzeptanzzustand (Maschine wird gestoppt)
*****_ Ablehnungszustand (Maschine wird gestoppt)
*** Transitionen
****_ Input und Output, meist durch : getrennt (Input:Output), wenn nur ein Symbol dort ist, dann ist IO das selbe
****_ Schleifen sind implizit
*** Leseeinheit
****_ Position initial zumeist links, sollte aber durch Annahme definiert werden, oder durch eine Status expliziert forciert werden
****_ Kann auch schreiben
*** Band
****_ Theoretisch unendlich
****_ Das Symbol # für nicht belegte Felder
*** Zugangsübergangfunktion
****_ <img:turingStateTable.png {scale=0.5}>
*** Bekannte Turing-Maschienen
****_ Binärer Dekrementierer
*****_ <img:turingBinaerDecrement.png {scale=0.25}>
****_ Binärer Addierer
*****_ <img:turingBinaerDecrement.png {scale=0.25}>
****_ Binärer Zähler (ja, wenn a und b gleich?)
*****_ <img:turingBinaerCounter.png {scale=0.25}>
*** Definitionen
****_ Algorithmus
*****_ Ein Algorithmus beschreibt eine endliche, deterministische und effiziente Methode zur Problemlösung.\n Diese Methode kann durch ein Computerprogramm implementiert werden kann.
****_ Erkennen
*****_ Eine TM erkennt eine Sprache, wenn sie für alle Wörter der Sprache in einem Aktzeptanzzustand endet.
****_ Entscheiden
*****_ Hält an und erkennt das Wörter nicht Teil der Sprache sind.
**** Berechenbarkeit
** Berechenbarkeit
** Unlösbarkeit
** Nicht effizient lösbare Prob.
** p versus np
** np vollständig
** Klassifikation





center footer Philip Benischke (287519)

legend left
  Short
  legend
endlegend
@endmindmap
